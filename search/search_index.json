{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sujay's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tutorials/go-setup/","title":"Setting up a Dev Container in GO","text":"<ul> <li>Primary Author: Sujay Patel</li> <li>Reviewer: Ansh Desai</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>This guide walks you through setting up a basic Go project while using a development container and a Git repository. This project assumes no prior experience to actually using Go and will serve as a beginner friendly tutorial in which the goal is to simply print \u201cHello, COMP423.\u201d</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following tools are installed before starting:</p> <ol> <li>VS Code <ul> <li>VS Code Dev Containers Extension </li> </ul> </li> <li>Docker </li> <li>Git </li> </ol> <p>Once you have these tools, you\u2019re ready to begin!</p>"},{"location":"tutorials/go-setup/#1-creating-a-project-directory-and-initializing-git","title":"1. Creating a Project Directory and Initializing Git","text":"<ol> <li> <p>Open your terminal and run the following commands with your desired project name (here we use \"hello-comp\"):</p> <p><code>mkdir hello-comp</code> <code>cd hello-comp</code> <code>git init</code> </p> </li> <li> <p>Open your project in VS Code to proceed with the tutorial.</p> </li> </ol>"},{"location":"tutorials/go-setup/#2-adding-a-github-repository","title":"2. Adding a GitHub Repository","text":"<ol> <li>On GitHub, create a new remote repository with public visibility.  </li> <li>In your project terminal, link the local repository to GitHub:</li> </ol> <pre><code>    git remote add origin https://github.com/&lt;username&gt;/&lt;repository-name&gt;\n</code></pre> <p>Replace <code>&lt;username&gt;</code> and <code>&lt;repository-name&gt;</code> with your GitHub username and the repository\u2019s name.</p>"},{"location":"tutorials/go-setup/#3-setting-up-a-dev-container","title":"3. Setting Up a Dev Container","text":"<ol> <li> <p>Create a <code>.devcontainer</code> directory within your project:</p> <p><code>mkdir .devcontainer</code> </p> </li> <li> <p>Inside <code>.devcontainer</code>, create a <code>devcontainer.json</code> file:  </p> <p><code>touch .devcontainer/devcontainer.json</code> </p> </li> <li> <p>Add the following configuration to the <code>devcontainer.json</code> file:  </p> </li> </ol> <pre><code>    {\n        \"name\": \"Go Dev Container\",\n        \"image\": \"mcr.microsoft.com/vscode/devcontainers/base:ubuntu\",\n        \"features\": {\n            \"ghcr.io/devcontainers/features/go\": {}\n        },\n        \"customizations\": {\n            \"vscode\": {\n                \"extensions\": [\n                    \"golang.go\"\n                ]\n            }\n        },\n        \"mounts\": [\n            \"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n        ]\n    }\n</code></pre> <ol> <li> <p>In VS Code, click the <code>Reopen in Container</code> button that appears. If it doesn't appear, try holding down <code>Command-Shift</code> and pressing <code>p</code> twice and type in <code>Dev Containers: Reopen in Container</code> at the top of the VS Code page.</p> </li> <li> <p>Verify that Go is installed by running the following:</p> <p><code>go version</code></p> <ul> <li>Your terminal should read something similar to this: <code>go version go1.23.5 linux/arm64</code></li> </ul> </li> </ol>"},{"location":"tutorials/go-setup/#4-starting-the-go-project","title":"4. Starting the Go Project","text":"<ol> <li> <p>Inside your project's dev container, run the following to create a go.mod file: <code>go mod init github.com/&lt;username&gt;/&lt;repository-name&gt;</code></p> <p>Replace <code>&lt;username&gt;</code> and <code>&lt;repository-name&gt;</code> with your GitHub username and the repository\u2019s name.</p> </li> <li> <p>Create a file called main.go in your projects root directory:</p> <p><code>touch main.go</code></p> </li> <li> <p>Type the following code in your <code>main.go</code> file:</p> </li> </ol> <pre><code>    package main\n\n    import \"fmt\"\n\n    func main() {\n        fmt.Println(\"Hello, COMP423.\u201d)\n    }\n</code></pre>"},{"location":"tutorials/go-setup/#5-compiling-and-running-the-project","title":"5. Compiling and Running the Project","text":"<ol> <li> <p>Compile the project and run the executable file with the following command:</p> <p><code>go run main.go</code></p> <p>The <code>run</code> command will compile and execute the code without additionally creating a binary file. It is the equivalent to running <code>go build -o &lt;file-name&gt;</code> and <code>./&lt;file-name&gt;</code> without having to create <code>&lt;file-name&gt;</code> itself. You may think of the <code>go build</code> command as similar to <code>gcc</code> as they both function to compile code into an executable file.</p> </li> <li> <p>So alternatively, you may run the following commands:</p> <p><code>go build -o \"go-project\"</code></p> <p><code>./go-project</code></p> </li> <li> <p>You should see the following output:</p> <p><code>Hello, COMP423.</code></p> </li> </ol>"},{"location":"tutorials/go-setup/#6-pushing-your-hard-work-to-github","title":"6. Pushing Your Hard Work to Github","text":"<ol> <li> <p>Configure your username and password for git if not done already:</p> <p><code>git config user.name --global \"your-github-username\"</code> <code>git config user.email --global \"your-email\"</code></p> </li> <li> <p>Add a <code>README</code> file if desired:</p> <p><code>echo \"My First Go Project\" &gt; README.md</code></p> </li> <li> <p>Stage your files:</p> <p><code>git add .</code></p> </li> <li> <p>Commit your staged files:</p> <p><code>git commit -m \"your-commit-message\"</code></p> </li> <li> <p>Push your files:     <code>git push -u origin main</code></p> <p>Note</p> <p>If you're using an older version of git, your branch may be named <code>master</code> instead of <code>main</code>. You can change it with the following command: <code>git branch -M main</code></p> </li> </ol> <p>Congrats on completing your first Go Project! </p>"}]}